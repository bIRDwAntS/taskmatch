@use 'sass:map';
@use 'sass:color';
@use 'variables' as *;
@use 'functions' as fn;

//responsive font-sizes with bug verification
@mixin font-size($key, $line-height-offset: 0.8rem) {
  $size: map.get($font-sizes, $key);
  @if $size {
    font-size: $size;
    line-height: calc(#{$size} + #{$line-height-offset});
  } @else {
    @warn "Font size '#{$key}' not found in $font-sizes map.";
  }
}

//responsive layouts
@mixin media($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map.get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found.";
  }
}

//responsive grids
@mixin grid($columns: 12, $gap: fn.spacing('md'), $responsive: null) {
  display: grid;
  gap: $gap;
  
  @if $responsive {
    @each $breakpoint, $cols in $responsive {
      @include media($breakpoint) {
        grid-template-columns: repeat($cols, 1fr);
      }
    }
  } @else {
    grid-template-columns: repeat($columns, 1fr);
  }
}


//custom truncates
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

//custom transition with bug verification & fallback
@mixin transition($property: all, $speed: 'base') {
  $timing: map.get($transitions, $speed);
  @if $timing {
    transition: $property $timing;
  } @else {
    @warn "Transition speed '#{$speed}' not found.";
    transition: $property 250ms ease-in-out; // Fallback
  }
}

//foundation of button
@mixin button-base() {
  //basis
  display: inline-flex;
  align-items: center;
  justify-content: center;
  
  padding: map.get($form, 'input-padding');
  border: none;
  border-radius: map.get($border-radius, 'base');
  font-family: map.get($font-families, 'primary');
  font-size: map.get($font-sizes, 'base');
  font-weight: 500;
  text-decoration: none;

  cursor: pointer;
  @include transition('all');

  //accessibility
  &:focus-visible {
    outline: 2px solid map.get($colors, 'primary');
    outline-offset: 2px;
  }
}

//custom buttons
@mixin button-variant($variant: 'base') {
  $bg-color: map.get($button-colors, $variant);
  $text-color: map.get($text-colors, 'primary');
  //bugs checking with fallback
  @if not $bg-color {
    @warn "Button variant '#{$variant}' not found.";
    $bg-color: map.get($button-colors, 'base'); // Fallback
  }

  background-color: $bg-color;
  color: $text-color;
  
  &:hover {
    background-color: color.scale($bg-color, $lightness: -5%);
  }
  
  &:active {
    background-color: color.scale($bg-color, $lightness: -10%);
  }
  
  &:disabled,
  &.btn-disabled {
    background-color: map.get($button-colors, 'disabled');
    cursor: not-allowed;
    opacity: 0.7;
  }
}

//more focus states for accessibility
@mixin focus-visible($color: null) {
  &:focus-visible {
    outline: 2px solid if($color, $color, map.get($colors, 'primary'));
    outline-offset: 2px;
  }
}